@using BillIssue.Web.Services

@inject StateService stateService
@inject IJSRuntime JSRuntime

        <header class="app-header">

           <!-- Start::main-header-container -->
           <div class="main-header-container container-fluid">

               <!-- Start::header-content-left -->
               <div class="header-content-left">

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <div class="horizontal-logo">
                           <a href="home" class="header-logo">
                               <img src="../assets/images/brand-logos/desktop-logo.png" alt="logo" class="desktop-logo">
                               <img src="../assets/images/brand-logos/toggle-logo.png" alt="logo" class="toggle-logo">
                               <img src="../assets/images/brand-logos/desktop-dark.png" alt="logo" class="desktop-dark">
                               <img src="../assets/images/brand-logos/toggle-dark.png" alt="logo" class="toggle-dark">
                               <img src="../assets/images/brand-logos/desktop-white.png" alt="logo" class="desktop-white">
                               <img src="../assets/images/brand-logos/toggle-white.png" alt="logo" class="toggle-white">
                           </a>
                       </div>
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <!-- Start::header-link -->
                        <a aria-label="Hide Sidebar" @onclick="ToggleMenu" class="sidemenu-toggle header-link animated-arrow hor-toggle horizontal-navtoggle" data-bs-toggle="sidebar" href="javascript:void(0);"><span></span></a>
                       <!-- End::header-link -->
                   </div>
                   <!-- End::header-element -->

               </div>
               <!-- End::header-content-left -->

               <!-- Start::header-content-right -->
               <div class="header-content-right">

                   <!-- Start::header-element -->
                   <div class="header-element country-selector">
                       <!-- Start::header-link -->
                       <a href="javascript:void(0);" class="header-link" data-bs-toggle="modal" data-bs-target="#languageModal">
                          <span class="fw-semibold mb-0 lh-1">EN</span>
                       </a>
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element header-theme-mode" @onclick='() => colorthemeFn()'>
                       <!-- Start::header-link|layout-setting -->
                       <a href="javascript:void(0);" class="header-link layout-setting">
                           <span class="light-layout">
                               <!-- Start::header-link-icon -->
                           <i class="bx bx-moon header-link-icon"></i>
                               <!-- End::header-link-icon -->
                           </span>
                           <span class="dark-layout">
                               <!-- Start::header-link-icon -->
                           <i class="bx bx-sun header-link-icon"></i>
                               <!-- End::header-link-icon -->
                           </span>
                       </a>
                       <!-- End::header-link|layout-setting -->
                   </div>
                   <!-- End::header-element -->

                   <!-- Start::header-element -->
                   <div class="header-element">
                       <!-- Start::header-link|dropdown-toggle -->
                       <a href="javascript:void(0);" class="header-link dropdown-toggle" id="mainHeaderProfile" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                           <div class="d-flex align-items-center">
                               <div class="me-sm-2 me-0">
                                   <img src="../assets/images/faces/9.jpg" alt="img" width="32" height="32" class="rounded-circle">
                               </div>
                               <div class="d-sm-block d-none">
                                   <p class="fw-semibold mb-0 lh-1">Json Taylor</p>
                                   <span class="op-7 fw-normal d-block fs-11">Web Designer</span>
                               </div>
                           </div>
                       </a>
                       <!-- End::header-link|dropdown-toggle -->
                       <ul class="main-header-dropdown dropdown-menu pt-0 overflow-hidden header-profile-dropdown dropdown-menu-end" aria-labelledby="mainHeaderProfile">
                           @* <li><a class="dropdown-item d-flex" href="profile"><i class="ti ti-user-circle fs-18 me-2 op-7"></i>Profile</a></li> *@
                           <li><a class="dropdown-item d-flex" href="logout"><i class="ti ti-logout fs-18 me-2 op-7"></i>Log Out</a></li>
                       </ul>
                   </div>  
                   <!-- End::header-element -->

               </div>
               <!-- End::header-content-right -->

           </div>
           <!-- End::main-header-container -->

        </header>

@code {        
    private async void ToggleMenu() {
        var toggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-vertical-style");
        var navStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-style");
        var isdoubleMenuActive = await JSRuntime.InvokeAsync<bool>("interop.isEleExist", ".double-menu-active");
        var inner = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");
          
        if (inner <= 992) {
                if (toggled == "open") {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");
                } else {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "open");
                }
        } 
        else {
            if (navStyle != null) {
                if (toggled != null) {
                    await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                } 
                else {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", navStyle + "-closed");
                }
            } 
            else if (verticalStyle != null) {
                if (verticalStyle == "doublemenu") {
                    if (toggled == "double-menu-open" && isdoubleMenuActive) {
                        await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
                    } 
                    else {
                        if (isdoubleMenuActive) {
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-open");
                        }
                    }
                } 
                else if (toggled != null) {
                        await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                } 
                else {
                    switch (verticalStyle) {
                        case "closed":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close-menu-close");
                            break;
                        case "icontext":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-text-close");
                            break;
                        case "overlay":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-overlay-close");
                            break;
                        case "detached":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "detached-close");
                            break;
                    }
                }
            }
        }
    }
    
    private async void colorthemeFn()
    {
        await stateService.ChangeColorTheme();
    }
}

    <!-- Tom Select JS -->
    <script src="../assets/libs/tom-select/js/tom-select.complete.min.js"></script>
    
    <script>
        window.onload = function () {
            setTimeout(() => {
                /*header Counrty Modal */
                new TomSelect('#Country-img',{
                    render: {
                        option: function (data, escape) {
                            return `<div><img class="avatar avatar-xs avatar-rounded" src="${data.src}"> <span class="mx-1">${data.text}</span></div>`;
                        },
                        item: function (item, escape) {
                                return `<div><img class="avatar avatar-xs avatar-rounded" src="${item.src}"> <span class="mx-1">${item.text}</span></div>`;
                        }
                    }
                });
                /*header Counrty Modal*/

            }, 1000);
        };

    </script>