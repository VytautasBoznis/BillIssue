@using BillIssue.Web.Data
@using BillIssue.Web.Services
@using System.Text.Json;
@inject MenuDataService MenuDataService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

<div id="responsive-overlay" @onclick="() => responsivecloseFn()"></div>
<aside class="app-sidebar sticky @sidebarClass" id="sidebar" @onmouseenter="() => HoverToggleInnerMenuFn(true)" @onmouseleave="() => HoverToggleInnerMenuFn(false)" @onclick="() => icontextOpenFn()">

    <!-- Start::main-sidebar-header -->
    <div class="main-sidebar-header">
        <a href="home" class="header-logo">
            <img src="../assets/images/brand-logos/desktop-logo.png" alt="logo" class="desktop-logo">
            <img src="../assets/images/brand-logos/toggle-logo.png" alt="logo" class="toggle-logo">
            <img src="../assets/images/brand-logos/desktop-dark.png" alt="logo" class="desktop-dark">
            <img src="../assets/images/brand-logos/toggle-dark.png" alt="logo" class="toggle-dark">
            <img src="../assets/images/brand-logos/desktop-white.png" alt="logo" class="desktop-white">
            <img src="../assets/images/brand-logos/toggle-white.png" alt="logo" class="toggle-white">
        </a>
    </div>
    <!-- End::main-sidebar-header -->
    <!-- Start::main-sidebar -->
    <div class="main-sidebar" id="sidebar-scroll">
        <BlazorOverlayScrollbars @ref="scrollbarsRef">
            <BlazorOverlayScrollbarsContent>
                <!-- Start::nav -->
                <nav class="main-menu-container nav nav-pills flex-column sub-open">
                    <div class="slide-left" id="slide-left" @onclick="leftArrowFn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="#7b8191" width="24" height="24"
                             viewBox="0 0 24 24">
                            <path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"></path>
                        </svg>
                    </div>
                    @if (menuLoaded)
                    {
                        <ul class="main-menu">
                            @foreach (var mainMenuItem in menuVal)
                            {
                                <!-- Start::slide__category -->
                                <li class="@(!string.IsNullOrEmpty(mainMenuItem.MenuTitle) ? "slide__category" : "") @(mainMenuItem.Type == "link"? "slide" : "")
                                    @(mainMenuItem.Type == "sub" ? "slide has-sub" : "")  @(mainMenuItem.Active ? "open" : "") @(mainMenuItem.Selected ? "active" : "")   ">
                                    @if (!string.IsNullOrEmpty(mainMenuItem.MenuTitle))
                                    {
                                        <span class="category-name">@mainMenuItem.MenuTitle</span>
                                    }
                                    @if (mainMenuItem.Type == "link")
                                    {
                                        <a href="@mainMenuItem.Path" @onclick="async (e) => { await SetSubmenu((mainMenuItem, null)); Navigation.NavigateTo(mainMenuItem.Path); }" class="side-menu__item @(mainMenuItem.Selected ? "active" : "")">
                                            <i class="@(mainMenuItem.Icon) side-menu__icon"></i>
                                            <span class="side-menu__label">
                                                @mainMenuItem.Title
                                                @if (!string.IsNullOrEmpty(mainMenuItem.BadgeValue))
                                                {
                                                    <span class="badge @(mainMenuItem.BadgeClass) ms-1">@mainMenuItem.BadgeValue</span>
                                                }
                                            </span>
                                        </a>
                                    }
                                    @if (mainMenuItem.Type == "external")
                                    {
                                        <a href="@mainMenuItem.Path" target="_blank" class="side-menu__item">
                                            <i class="@(mainMenuItem.Icon) side-menu__icon"></i>
                                            <span class="side-menu__label">
                                                @mainMenuItem.Title
                                                @if (!string.IsNullOrEmpty(mainMenuItem.BadgeValue))
                                                {
                                                    <span class="badge @(mainMenuItem.BadgeClass) ms-1">@mainMenuItem.BadgeValue</span>
                                                }
                                            </span>
                                        </a>
                                    }
                                    @if (mainMenuItem.Type == "empty")
                                    {
                                        <a href="javascript:void(0)" class="side-menu__item">
                                            <i class="@(mainMenuItem.Icon) side-menu__icon"></i>
                                            <span class="side-menu__label">
                                                @mainMenuItem.Title
                                                @if (!string.IsNullOrEmpty(mainMenuItem.BadgeValue))
                                                {
                                                    <span class="badge @(mainMenuItem.BadgeClass) ms-1">@mainMenuItem.BadgeValue</span>
                                                }
                                            </span>
                                        </a>
                                    }
                                    @if (mainMenuItem.Type == "sub")
                                    {
                                        <SubNavMenu menuData="@mainMenuItem" OnToggleSubmenu="ToggleSubMenu" OnSetSubmenu="SetSubmenu" Level="@(level + 1)" />
                                    }
                                </li>
                                <!-- End::slide__category -->
                            }
                        </ul>
                    }                    
                    <div class="slide-right" id="slide-right" @onclick="rightArrowFn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="#7b8191" width="24" height="24"
                             viewBox="0 0 24 24">
                            <path d="M10.707 17.707 16.414 12l-5.707-5.707-1.414 1.414L13.586 12l-4.293 4.293z"></path>
                        </svg>
                    </div>
                </nav>
                <!-- End::nav -->
            </BlazorOverlayScrollbarsContent>
        </BlazorOverlayScrollbars>
    </div>
    <!-- End::main-sidebar -->

</aside>

@code {
    DotNetObjectReference<NavMenu>? dotNetObjectReference;
    private string sidebarClass = "";

    private bool menuLoaded = false;
    private List<MainMenuItems>? menuVal;
    private int level = 0;

    protected override async Task OnInitializedAsync()
    {
        menuVal = await MenuDataService.GetMenuData();
        await Random(menuVal);
        menuLoaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckLayout();
            var currentUri = new Uri(Navigation.Uri);
            var currentPath = currentUri.AbsolutePath;
            var currentItem = FindMenuItemByPath(menuVal, currentPath != "/" ? currentPath : "/home");
            if (currentItem != null)
            {
                // To Activate on initial load
                await SetSubmenu((currentItem, null));
            }
            screenSize = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("resizeFunctions.addresizeListener", dotNetObjectReference);

            if (screenSize < 992)
            {
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");
            }

            // Attach scroll event listener
            await AttachScrollListener();
        }
    }
    int screenSize = 1268;
    private List<int> WindowPreSize = new List<int>();

    [JSInvokable]
    public async void OnWindowResize(int position)
    {
        screenSize = position;
        WindowPreSize.Add(position);

        if (WindowPreSize.Count > 2)
        {
            WindowPreSize.RemoveAt(0);
        }

        if (WindowPreSize.Count > 1)
        {
            int recentSize = WindowPreSize[WindowPreSize.Count - 1];
            int prevSize = WindowPreSize[WindowPreSize.Count - 2];
            if (recentSize < 992 && prevSize >= 992)
            {
                // Execute logic for window size less than 992
                await CheckLayout();
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");

            }
            else if (recentSize >= 992 && prevSize < 992)
            {
                // Execute logic for window size greater than or equal to 992
                await CheckLayout();
            }
        }


        checkHoriMenu();

        StateHasChanged();
    }

    BlazorOverlayScrollbars? scrollbarsRef;
    bool isVertical = true;

    [Inject] private NavScrollService? scrollService { get; set; }

    protected override void OnInitialized()
    {
        if (scrollService != null)
        {
            scrollService.ScrollModeChanged += HandleScrollModeChanged;
        }
        Navigation.LocationChanged += HandleLocationChange;
    }

    // Method to handle location changes
    private void HandleLocationChange(object sender, LocationChangedEventArgs args)
    {
        // Your logic here
        // For example, you can access the new URL:
        var currentPath = Navigation.ToAbsoluteUri(args.Location).AbsolutePath;
        var currentItem = FindMenuItemByPath(menuVal, currentPath != "/" ? currentPath : "/home");
        if (currentItem != null)
        {
            // To Activate on initial load
            SetSubmenu((currentItem, null));
        }
    }

    private async void HandleScrollModeChanged(bool isVertical)
    {
        this.isVertical = isVertical;
        await CheckLayout();
    }

    async Task CheckLayout()
    {
        await Task.Delay(1000); // Delay for 1 second
        var layout = await GetLayoutFromHtml();
        if (layout == "horizontal" && screenSize > 992)
        {
            DestroyScroll();
        }
        else
        {
            InitializeScroll();
        }
    }

    private async Task<string> GetLayoutFromHtml()
    {
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-layout");
        return verticalStyle;
    }

    void InitializeScroll()
    {
        if (scrollbarsRef != null)
        {
            scrollbarsRef.Constroy(); // Corrected method name
        }
    }

    void DestroyScroll()
    {
        if (scrollbarsRef != null)
        {
            scrollbarsRef.Destroy();
        }
    }


    private async Task AttachScrollListener()
    {
        await JSRuntime.InvokeVoidAsync("interop.registerScrollListener", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void SetStickyClass(int scrollY)
    {
        if (scrollY >= 75)
        {
            sidebarClass = "sticky-pin";
        }
        else
        {
            sidebarClass = "";
        }

        StateHasChanged();
    }


    public class MenuNavElement
    {
        public int scrollWidth { get; set; }
        public int marginInlineStart { get; set; }
    }

    private async void rightArrowFn()
    {
        var menuNav = await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavElement", ".main-menu");
        var mainContainer1 = await JSRuntime.InvokeAsync<int>("interop.mainSidebarOffset", ".main-sidebar");
        var marginRightValue = menuNav.marginInlineStart;
        var check = menuNav.scrollWidth - mainContainer1;
        var mainContainer1Width = mainContainer1;

        if (menuNav.scrollWidth > mainContainer1)
        {
            if (Math.Abs(check) > Math.Abs(marginRightValue))
            {
                if (!(Math.Abs(check) > Math.Abs(marginRightValue) + mainContainer1Width))
                {
                    mainContainer1Width = Math.Abs(check) - Math.Abs(marginRightValue);
                    await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-right", "d-none");
                }
                await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", $"{menuNav.marginInlineStart - Math.Abs(mainContainer1Width)}px");
                await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-left", "d-none");
            }
        }
        closeMenuFn();
    }
    private async void leftArrowFn()
    {
        var menuNav = await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavElement", ".main-menu");
        var mainContainer1 = await JSRuntime.InvokeAsync<int>("interop.mainSidebarOffset", ".main-sidebar");
        var marginRightValue = menuNav.marginInlineStart;
        var check = menuNav.scrollWidth - mainContainer1;
        var mainContainer1Width = mainContainer1;
        if (menuNav.scrollWidth > mainContainer1)
        {
            if (marginRightValue < 0 && !(Math.Abs(marginRightValue) < mainContainer1Width))
            {
                await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", $"{menuNav.marginInlineStart + Math.Abs(mainContainer1Width)}px");
                await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-right", "d-none");
            }
            else
            {
                await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", "0px");
                await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-left", "d-none");
                await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-right", "d-none");
            }
        }
        else
        {
            await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", "0px");
            await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-left", "d-none");
        }
        closeMenuFn();
    }

    private async void checkHoriMenu()
    {
        var menuNav = await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavElement", ".main-menu");
        var mainContainer1 = await JSRuntime.InvokeAsync<int>("interop.mainSidebarOffset", ".main-sidebar");
        var marginRightValue = menuNav.marginInlineStart;
        var check = menuNav.scrollWidth - mainContainer1;
        if (menuNav.scrollWidth > mainContainer1)
        {
            await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-left", "d-none");
            await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-right", "d-none");
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-left", "d-none");
            await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-right", "d-none");
            await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", "0px");
        }
        if (menuNav.scrollWidth > mainContainer1)
        {
            if (Math.Abs(check) < Math.Abs(marginRightValue))
            {
                await JSRuntime.InvokeAsync<MenuNavElement>("interop.MenuNavmarginInlineStart", ".main-menu", -check + "px");
                await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-left", "d-none");
                await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-right", "d-none");
            }
        }
        if (marginRightValue == 0)
        {
            await JSRuntime.InvokeAsync<string>("interop.addClass", ".slide-left", "d-none");
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-right", "d-none");
        }

        if (marginRightValue != 0)
        {
            await JSRuntime.InvokeAsync<string>("interop.removeClass", ".slide-left", "d-none");
        }

        if (menuVal != null)
        {
            foreach (var item in menuVal.ToArray())
            {
                if (item.Children != null)
                {
                    foreach (var item1 in item.Children)
                    {
                        var directionChange1 = await JSRuntime.InvokeAsync<bool>("interop.directionChange", item1?.RandomNumber);
                        if (item1 != null)
                        {
                            item1.DirChange = directionChange1;
                        }
                        if (item1 != null && item1.Children != null)
                        {
                            foreach (var item2 in item1.Children)
                            {
                                var directionChange2 = await JSRuntime.InvokeAsync<bool>("interop.directionChange", item2?.RandomNumber);
                                if (item2 != null)
                                {
                                    item2.DirChange = directionChange2;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Method to recursively search for a menu item with matching path
    private MainMenuItems? FindMenuItemByPath(IEnumerable<MainMenuItems>? items, string path)
    {
        if (items == null)
        {
            return null;
        }

        foreach (var item in items)
        {
            if (item.Path == path)
            {
                return item;
            }
            // Recursively search through nested items
            if (item.Children != null)
            {
                var nestedItem = FindMenuItemByPath(item.Children, path);
                if (nestedItem != null)
                {
                    return nestedItem;
                }
            }
        }
        return null;
    }

    // Start of Toggle menu event
    private async Task Random(List<MainMenuItems>? menuData)
    {
        Random rand = new Random();
        foreach (var item in menuData!)
        {
            item.RandomNumber = rand.Next(1000); // Adjust range as needed
            if (item.Children != null)
            {
                await Random(item.Children.ToList());
            }
        }
    }

    private async Task ToggleSubMenu((MainMenuItems targetObject, MainMenuItems[] menuData) data)
    {
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-vertical-style");
        var navStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-style");
        var rtl = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "rtl");
        var navLayout = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-layout");
        var toggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        MainMenuItems targetObject = data.targetObject;
        MainMenuItems[] menuData = data.menuData;
        if (targetObject.Active)
        {
            return;
        }
        if (navStyle != "icon-hover" && navStyle != "menu-hover")
        {
            if ((menuData == null || menuData.Length == 0) && menuVal != null)
            {
                menuData = menuVal.ToArray();
            }

            foreach (var item in menuData!)
            {
                if (item == targetObject)
                {
                    item.Active = !item.Active;
                    if (item.Active)
                    {
                        CloseOtherMenus(menuData, item);
                    }
                    else
                    {
                        @* if (verticalStyle == "doublemenu") {
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
                        } *@
                    }
                    await SetAncestorsActive(menuData, item);
                }
                else if (!item.Active)
                {
                    item.Active = false;
                }

                if (item.Children != null && item.Children.Any())
                {
                    await ToggleSubMenu((targetObject!, item.Children.ToArray()));
                }
            }
            if (targetObject?.Children != null && targetObject.Active)
            {
                if (verticalStyle == "doublemenu" && toggled != "double-menu-open")
                {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-open");
                }
            }
            if (navLayout == "horizontal" && (navStyle == "menu-click" || navStyle == "icon-click"))
            {
                var directionChange = await JSRuntime.InvokeAsync<bool>("interop.directionChange", targetObject?.RandomNumber);
                if (targetObject != null)
                {
                    targetObject.DirChange = directionChange;
                }
            }
        }
        StateHasChanged();
    }

    private async Task SetAncestorsActive(IEnumerable<MainMenuItems> items, MainMenuItems targetObject)
    {
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-vertical-style");
        var parent = FindParent(items, targetObject);
        if (parent != null)
        {
            parent.Active = true;
            await SetAncestorsActive(items, parent);
            @* }else{ *@
            @* if (verticalStyle == "doublemenu") {
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
            } *@
        }
    }

    private void CloseOtherMenus(IEnumerable<MainMenuItems> menuData, MainMenuItems targetObject)
    {
        foreach (var item in menuData)
        {
            if (item != targetObject)
            {
                item.Active = false;
                if (item.Children != null && item.Children.Any())
                {
                    CloseOtherMenus(item.Children, targetObject);
                }
            }
        }
    }

    private MainMenuItems? FindParent(IEnumerable<MainMenuItems> items, MainMenuItems targetObject)
    {
        foreach (var item in items)
        {
            if (item.Children != null && item.Children.Contains(targetObject))
            {
                return item;
            }
            if (item.Children != null && item.Children.Any())
            {
                var parent = FindParent(item.Children, targetObject);
                if (parent != null)
                {
                    return parent;
                }
            }
        }
        return null;
    }

    // End of Toggle menu event


    // Start of Set menu Active event
    private async Task SetSubmenu((MainMenuItems targetObject, MainMenuItems[]? menuData) data)
    {
        var innerLevel = false;
        var (targetObject, menuData) = data;
        if ((menuData == null || menuData.Length == 0) && menuVal != null)
        {
            menuData = menuVal.ToArray();
        }
        else
        {
            innerLevel = true;
        }
        foreach (var item in menuData!)
        {
            if (item == targetObject)
            {
                if (item.Type == "link" && !innerLevel)
                {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
                }
                item.Active = true;
                item.Selected = true;
                SetMenuAncestorsActive(item);
            }
            else if (!item.Active && !item.Selected)
            {
                item.Active = false;
                item.Selected = false;
            }
            else
            {
                RemoveActiveOtherMenus(item);
            }

            if (item.Children != null && item.Children.Any())
            {
                await SetSubmenu((targetObject, item.Children));
            }
        }
        StateHasChanged();
    }

    private void SetMenuAncestorsActive(MainMenuItems targetObject)
    {
        var parent = GetParentObject(menuVal, targetObject);
        if (parent != null)
        {
            parent.Active = true;
            parent.Selected = true;
            SetMenuAncestorsActive(parent);
        }
    }

    private MainMenuItems? GetParentObject(IEnumerable<MainMenuItems>? items, MainMenuItems childObject)
    {
        if (items == null || childObject == null) return null;
        foreach (var item in items)
        {
            if (item.Children != null && item.Children.Contains(childObject))
            {
                return item;
            }

            var parent = GetParentObject(item.Children, childObject);
            if (parent != null)
            {
                return parent;
            }
        }
        return null;
    }

    private void RemoveActiveOtherMenus(MainMenuItems item)
    {
        if (item != null)
        {
            if (item.Children != null && item.Children.Any())
            {
                foreach (var child in item.Children)
                {
                    child.Active = false;
                    child.Selected = false;
                }
            }

            item.Active = false;
            item.Selected = false;

            if (item.Children != null && item.Children.Any())
            {
                foreach (var child in item.Children)
                {
                    RemoveActiveOtherMenus(child);
                }
            }
        }
    }

    private string GetMenuItemClasses(MainMenuItems menuItem)
    {
        var classes = new List<string>();
        if (!string.IsNullOrEmpty(menuItem.MenuTitle))
        {
            classes.Add("slide__category");
        }
        if (menuItem.Type == "empty" || menuItem.Type == "link" || menuItem.Type == "external" || menuItem.Type == "sub")
        {
            classes.Add("slide");
        }
        if (menuItem.Active)
        {
            classes.Add("open");
        }
        if (menuItem.Selected)
        {
            classes.Add("active");
        }
        return string.Join(" ", classes);
    }
    // End of Set menu Active event

    // Start of Menu Close functionality
    public void closeMenuFn()
    {
        void closeMenuRecursively(IEnumerable<MainMenuItems>? items)
        {
            if (items == null) return;
            foreach (var item in items)
            {
                item.Active = false;
                closeMenuRecursively(item.Children);
            };
        };
        closeMenuRecursively(menuVal);
        StateHasChanged();
    }
    // End of Menu Close functionality

    // Hover Toggle Start
    private async void HoverToggleInnerMenuFn(bool isMouseOver)
    {
        var dataToggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        if (dataToggled == "icon-overlay-close" || dataToggled == "detached-close")
        {
            if (isMouseOver)
            {
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-icon-overlay", "open");
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-icon-overlay");
            }
        }
    }
    // Hover Toggle End
    // Icon ClickOpen Start
    private async void icontextOpenFn()
    {
        var dataToggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        if (dataToggled == "icon-text-close")
        {
            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-icon-text", "open");
        }
    }
    // Icon Clickopen End

    // Responsive Close Start
    private async Task responsivecloseFn()
    {
        var toggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        var inner = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");

        if (toggled == "open")
        {
            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "open");
        }
    }
    // Responsive Close End
}

