@page "/register"
@layout NotAuthorizedLayout

@inject MultilanguageService multilanguageService
@inject AccountService accountService
@inject NavigationManager NavigationManager

@using BillIssue.Web.Domain.Constants
@using BillIssue.Web.Services

@if (isLoading)
{
    @*TODO add Spinner*@
    <div>LOADING.....</div>
}
else
{
    <div class="container-lg">
        <div class="row justify-content-center align-items-center authentication authentication-basic h-100">
            <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-6 col-sm-8 col-12">
                <div class="my-5 d-flex justify-content-center">
                    <a href="home">
                        <img src="../assets/images/brand-logos/desktop-logo.png" alt="logo" class="desktop-logo">
                        <img src="../assets/images/brand-logos/desktop-dark.png" alt="logo" class="desktop-dark">
                    </a>
                </div>
                <div class="card custom-card">
                    <div class="card-body p-5">
                        <p class="h5 fw-semibold mb-2 text-center">@translations[MultilanguageKeyConstants.RegisterHeaderText]</p>
                        <div class="row gy-3">
                            <div class="col-xl-12">
                                <label for="signup-email" class="form-label text-default">@translations[MultilanguageKeyConstants.RegisterEmailText]</label>
                                <input type="text" @bind="@email" class="form-control form-control-lg" tabindex="1" id="signup-email" placeholder="@translations[MultilanguageKeyConstants.RegisterEmailText]">
                            </div>
                            <div class="col-xl-12">
                                <label for="signup-firstname" class="form-label text-default">@translations[MultilanguageKeyConstants.RegisterFirstNameText]</label>
                                <input type="text" @bind="@firstName" class="form-control form-control-lg" tabindex="2" id="signup-firstname" placeholder="@translations[MultilanguageKeyConstants.RegisterFirstNameText]">
                            </div>
                            <div class="col-xl-12">
                                <label for="signup-lastname" class="form-label text-default">@translations[MultilanguageKeyConstants.RegisterLastNameText]</label>
                                <input type="text" @bind="@lastName" class="form-control form-control-lg" id="signup-lastname" tabindex="3" placeholder="@translations[MultilanguageKeyConstants.RegisterLastNameText]">
                            </div>
                            <div class="col-xl-12">
                                <label for="signup-password" class="form-label text-default">@translations[MultilanguageKeyConstants.RegisterPasswordText]</label>
                                @if (showPassword)
                                {
                                    <div class="input-group">
                                        <input type="text" class="form-control form-control-lg" tabindex="4" placeholder="@translations[MultilanguageKeyConstants.RegisterPasswordPlaceholderText]" @bind="@password" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibilityPassword">
                                            <i class="ri-eye-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="input-group">
                                        <input type="password" class="form-control form-control-lg" tabindex="4" placeholder="@translations[MultilanguageKeyConstants.RegisterPasswordPlaceholderText]" @bind="@password" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibilityPassword">
                                            <i class="ri-eye-off-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="col-xl-12 mb-2">
                                <label for="signup-confirmpassword" class="form-label text-default">@translations[MultilanguageKeyConstants.RegisterPasswordConfirmText]</label>
                                @if (showPasswordConfirmation)
                                {
                                    <div class="input-group">
                                        <input type="text" class="form-control form-control-lg" tabindex="5" placeholder="@translations[MultilanguageKeyConstants.RegisterPasswordConfirmPlaceholderText]" @bind="@passwordConfirmation" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibilityPasswordConfirm">
                                            <i class="ri-eye-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="input-group">
                                        <input type="password" class="form-control form-control-lg" tabindex="5" placeholder="@translations[MultilanguageKeyConstants.RegisterPasswordConfirmPlaceholderText]" @bind="@passwordConfirmation" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibilityPasswordConfirm">
                                            <i class="ri-eye-off-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="col-xl-12 d-grid mt-2">
                                <button @onclick="RegisterStandart" tabindex="6" class="btn btn-lg btn-primary">@translations[MultilanguageKeyConstants.RegisterRegisterAccountText]</button>
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="fs-12 text-muted mt-3">@translations[MultilanguageKeyConstants.RegisterAlreadyHaveAccountText] <a href="login" class="text-primary">@translations[MultilanguageKeyConstants.RegisterLoginText]</a></p>
                        </div>
                        <div class="text-center my-3 authentication-barrier">
                            <span>@translations[MultilanguageKeyConstants.OrText]</span>
                        </div>
                        <div class="btn-list text-center">
                            <button class="btn btn-icon btn-light">
                                <i class="ri-google-line fw-bold text-dark op-7"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string email = "";
    private string firstName = "";
    private string lastName = "";
    private string password = "";
    private string passwordConfirmation = "";
    private bool showPassword = false;
    private bool showPasswordConfirmation = false;

    private bool isLoading;

    private string[] usedTranslationKeys = {
        MultilanguageKeyConstants.RegisterHeaderText,
        MultilanguageKeyConstants.RegisterEmailText,
        MultilanguageKeyConstants.RegisterFirstNameText,
        MultilanguageKeyConstants.RegisterLastNameText,
        MultilanguageKeyConstants.RegisterPasswordText,
        MultilanguageKeyConstants.RegisterPasswordPlaceholderText,
        MultilanguageKeyConstants.RegisterPasswordConfirmText,
        MultilanguageKeyConstants.RegisterPasswordConfirmPlaceholderText,
        MultilanguageKeyConstants.RegisterRegisterAccountText,
        MultilanguageKeyConstants.RegisterAlreadyHaveAccountText,
        MultilanguageKeyConstants.RegisterLoginText,
        MultilanguageKeyConstants.OrText
    };

    private Dictionary<string, string> translations = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            translations = await multilanguageService.GetTranslations(usedTranslationKeys);
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleVisibilityPassword()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }

    private void ToggleVisibilityPasswordConfirm()
    {
        showPasswordConfirmation = !showPasswordConfirmation;
        StateHasChanged();
    }

    private async Task RegisterStandart()
    {
        if (string.IsNullOrEmpty(email) || 
            string.IsNullOrEmpty(firstName) ||
            string.IsNullOrEmpty(lastName) ||
            string.IsNullOrEmpty(password) ||
            string.IsNullOrEmpty(passwordConfirmation))
        {
            //TODO add validation
            return;
        }

        if (password != passwordConfirmation)
        {
            //TODO add Validation
            return; 
        }

        if (await accountService.Register(email, firstName, lastName, password))
        {
            NavigationManager.NavigateTo("home");
        }
        else
        {
            //TODO add error handling
        }
    }
}