@page "/login"
@layout NotAuthorizedLayout

@inject MultilanguageService multilanguageService
@inject AccountService accountService
@inject NavigationManager NavigationManager

@using BillIssue.Web.Domain.Constants
@using BillIssue.Web.Services
@using BlazorStrap

@if (isLoading)
{
    @*TODO add Spinner*@
    <div>LOADING.....</div>
}
else
{
    <div class="container">
        <div class="row justify-content-center align-items-center authentication authentication-basic h-100">
            <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-6 col-sm-8 col-12">
                <div class="my-5 d-flex justify-content-center">
                    <a href="home">
                        <img src="../assets/images/brand-logos/desktop-logo.png" alt="logo" class="desktop-logo">
                        <img src="../assets/images/brand-logos/desktop-dark.png" alt="logo" class="desktop-dark">
                    </a>
                </div>
                <div class="card custom-card">
                    <div class="card-body p-5">
                        <p class="h5 fw-semibold mb-2 text-center">@translations[MultilanguageKeyConstants.LoginHeaderText]</p>
                        <p class="mb-4 text-muted op-7 fw-normal text-center">@translations[MultilanguageKeyConstants.LoginSubheadingText]</p>
                        <div class="row gy-3">
                            <div class="col-xl-12">
                                <label for="signin-username" class="form-label text-default">@translations[MultilanguageKeyConstants.EmailFieldText]</label>
                                <input type="text" class="form-control form-control-lg" id="signin-username" @bind="@email" placeholder="@translations[MultilanguageKeyConstants.EmailFieldPlaceholder]">
                            </div>
                            <div class="col-xl-12 mb-2">
                                <label for="signin-password" class="form-label text-default d-block">@translations[MultilanguageKeyConstants.PasswordFieldText]<a href="remind-password" class="float-end text-danger">@translations[MultilanguageKeyConstants.ForgotPasswordText]</a></label>
                                @if (showPassword)
                                {
                                    <div class="input-group">
                                        <input type="text" class="form-control form-control-lg" placeholder="@translations[MultilanguageKeyConstants.PasswordFieldPlaceholder]" @bind="@password" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibility">
                                            <i class="ri-eye-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="input-group">
                                        <input type="password" class="form-control form-control-lg" placeholder="@translations[MultilanguageKeyConstants.PasswordFieldPlaceholder]" @bind="@password" />
                                        <button class="btn btn-light" type="button" @onclick="ToggleVisibility">
                                            <i class="ri-eye-off-line align-middle"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="col-xl-12 d-grid mt-2">
                                <a class="btn btn-lg btn-primary" @onclick="LoginStandart">@translations[MultilanguageKeyConstants.LoginButtonText]</a>
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="fs-12 text-muted mt-3">@translations[MultilanguageKeyConstants.RegisterHelpText]<a href="register" class="text-primary">@translations[MultilanguageKeyConstants.RegisterLinkText]</a></p>
                        </div>
                        <div class="text-center my-3 authentication-barrier">
                            <span>@translations[MultilanguageKeyConstants.OrText]</span>
                        </div>
                        <div class="btn-list text-center">
                            <button class="btn btn-icon btn-light">
                                <i class="ri-google-line fw-bold text-dark op-7"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private string email = "";
    private string password = "";
    private bool showPassword = false;

    private bool isLoading;

    private string[] usedTranslationKeys = {
        MultilanguageKeyConstants.LoginHeaderText,
        MultilanguageKeyConstants.LoginSubheadingText,
        MultilanguageKeyConstants.EmailFieldText,
        MultilanguageKeyConstants.EmailFieldPlaceholder,
        MultilanguageKeyConstants.PasswordFieldText,
        MultilanguageKeyConstants.PasswordFieldPlaceholder,
        MultilanguageKeyConstants.ForgotPasswordText,
        MultilanguageKeyConstants.LoginButtonText,
        MultilanguageKeyConstants.RegisterHelpText,
        MultilanguageKeyConstants.RegisterLinkText,
        MultilanguageKeyConstants.OrText
    };

    private Dictionary<string, string> translations = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            translations = await multilanguageService.GetTranslations(usedTranslationKeys);
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleVisibility()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }

    private async Task LoginStandart()
    {
        if(string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
        {
            //TODO add validation
            return;
        }

        if (await accountService.Login(email, password))
        {
            NavigationManager.NavigateTo("home");
        }
        else
        {
            //TODO add error handling
        }
    }
}